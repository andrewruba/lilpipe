name: publish

on:
  push:
    tags:
      - "v*.*.*"

# Avoid double publishes on the same tag
concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: pip

      # Install Poetry & project dev deps (matches CI)
      - name: Install Poetry & deps
        run: |
          python -m pip install --upgrade pip
          pip install poetry build
          poetry install --with dev --no-interaction

      # Lint / style / types (matches CI behavior)
      - name: Ruff lint
        run: poetry run ruff check --output-format=github .

      - name: Black style check
        run: poetry run black --check .

      - name: MyPy type check
        run: poetry run mypy src/ || true  # keep green until types stabilize

      # Tests
      - name: Run Pytest
        run: poetry run pytest -q

      # Ensure tag (vX.Y.Z) matches pyproject version (X.Y.Z)
      - name: Check tag matches version
        run: |
          TAG="${GITHUB_REF_NAME}"  # e.g. v0.1.0
          PY_VER=$(python - <<'PY'
          import tomllib, sys
          with open("pyproject.toml","rb") as f:
              data = tomllib.load(f)
          print(data["project"]["version"])
          PY
          )
          echo "Tag: $TAG  | pyproject version: $PY_VER"
          if [ "v${PY_VER}" != "${TAG}" ]; then
            echo "::error::Tag ${TAG} does not match pyproject version v${PY_VER}"
            exit 1
          fi

      # Build & sanity-check artifacts
      - name: Build sdist/wheel
        run: python -m build

      - name: Twine check
        run: python -m pip install --upgrade twine && python -m twine check dist/*

      # Publish to PyPI (official action)
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
